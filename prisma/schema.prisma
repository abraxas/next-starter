generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "fullTextIndex", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  adminUser        AdminUser?
  OrganizationUser OrganizationUser[]

  @@schema("public")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@schema("public")
}

model EmailCode {
  id        String   @id @default(cuid())
  code      String
  accountId String?
  email     String   @unique
  expiresAt DateTime

  @@schema("public")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@schema("public")
}

model AdminUser {
  id     String @id @default(uuid())
  userId String @unique

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@schema("public")
}

model OrganizationUser {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Overridables in case a client wants a user in multiple tenants to have different information
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?

  @@unique([userId, organizationId])
  @@schema("public")
}

model Organization {
  id                String             @id @default(uuid())
  slug              String             @unique(map: "organization_name_key")
  name              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  archived          Boolean            @default(false)
  organizationUsers OrganizationUser[]

  @@schema("public")
}
